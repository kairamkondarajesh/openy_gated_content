# This file contains .gitignore rules that are often used with Drupal projects.
# Because .gitignore is specific to your site and its deployment processes, you
# may need to uncomment, add, or remove rules.
#
# To ignore all paths that composer manages when using this project template,
# remove all double-hashed (##) lines.


# Ignore configuration files that may contain sensitive information.
#
# Typically, settings.php and related files are not committed to the
# repository because they contain information such as the database
# credentials that could be used to compromise a site. Sometimes,
# a settings.php might be committed to the repository if it reads
# sensitive information from environment variables or other sources.
# ------------------------------------------------------------------
/sites/*/settings*.php
/sites/*/services*.yml

# Ignore paths that contain user-generated content.
/sites/*/files
/sites/*/private

# Ignore SimpleTest multi-site environment.
/sites/simpletest


# Ignore custom modules managed by Composer.
#
# When a development team creates one or more custom modules that
# are intended for use on more than one site, the typical strategy
# is to register them in Packagist and give them the type
# `drupal-custom-module` instead of `drupal-module`. This will cause
# Composer to install them to the directory `modules/custom`.
#
# An alternate strategy for custom modules is to commit them
# directly to the repository of the site where they are used. This
# is commonly done with modules that are specific to just one site.
#
# Sites that have both Composer-managed custom modules and custom
# modules that are committed directly to the repository may ignore
# the `modules/custom` directory with the first rule shown below,
# and then allow the locations to be committed on a case-by-case
# basis by re-adding paths using `!` rules. A path that begins with
# a `!` will allow a previously-ignored path to be added to the
# repository. Note, however, that a path cannot be re-added if any
# of its parent directories are excluded. This is why we use the
# rule `/modules/custom/*` instead of `/modules/custom`.
#
# Sites that do not have any Composer-managed custom modules may
# delete all of the `modules/custom` lines below.
# ------------------------------------------------------------------
##/modules/custom/*
#!/modules/custom/module_in_repo


# Ignore directories generated by Composer
#
# See the "installer-paths" section in the top-level composer.json
# file.
# ------------------------------------------------------------------
/drush/Commands/contrib/
/core/
/modules/contrib/
/themes/contrib/
/profiles/contrib/
/libraries/

# Generally you should only ignore the root vendor directory. It's important
# that core/assets/vendor and any other vendor directories within contrib or
# custom module, theme, etc., are not ignored unless you purposely do so.
/vendor/

# Ignore scaffold files
#
# Note that the scaffold plugin may be used to automatically manage
# a site's .gitignore files. If the `vendor` directory is ignored,
# then one or more .gitignore files will be written to also ignore
# any file placed by scaffolding. To avoid the creation of
# additional .gitignore files, add all of the scaffold file
# locations to the top-level .gitignore file, as shown below.
# ------------------------------------------------------------------
/.csslintrc
/.editorconfig
/.eslintignore
/.eslintrc.json
/.gitattributes
/.ht.router.php
/.htaccess
/INSTALL.txt
/README.txt
/autoload.php
/example.gitignore
/index.php
/robots.txt
/update.php
/web.config
/modules/README.txt
/profiles/README.txt
/sites/README.txt
/sites/default/default.services.yml
/sites/default/default.settings.php
/sites/development.services.yml
/sites/example.settings.local.php
/sites/example.sites.php
/themes/README.txt


# Other common rules
# ------------------
# Ignore files generated by PhpStorm
/.idea/

# Ignore .env files as they are personal
/.env

# Exclude hidden OS files.
.DS_Store
._*
Thumbs.db
